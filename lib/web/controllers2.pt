# PF2 Library

@USE
pf2/lib/common.p
pf2/lib/web/templates.p

@CLASS
pfController

@BASE
pfClass

@OPTIONS
locals

@create[aOptions]
## aOptions.mountPoint[/] - место монтирования. Нужно передавать только в головной модуль,
##                          поскольку метод assignModule будт вычислять точку монтирования самостоятельно.
## aOptions.parentModule - ссылка на объект-контейнер.
## aOptions.appendSlash(false) - нужно ли добавлять к урлам слеш.
## aOptions.router
  ^self.cleanMethodArgument[]

  ^pfChainMixin:mixin[$self;
    ^hash::create[$aOptions]
    $.exportModulesProperty(true)
  ]


@run[aRequest;aOptions]
## Запускает процесс. Если вызван метод run, то модуль становится «менеджером».
  $result[]

@assignModule[aName;aClassDef;aOptions]
## aName — имя свойства со ссылкой на модуль.
## aClassDef[path/to/package.p@className::constructor]
## aOptions — параметры, которые передаются конструктору.
## aOptions.mountTo[$aName] - точка монтирования относительно текущего модуля.
  $result[]
  ^self.__pfChainMixin__.assignModule[$aName;$aClassDef;$aOptions]

@assignMiddleware[aObject;aConstructorOptions]
## aObject[class def|middleware object] — определение класса или вызов конструктора
## aConstructorOptions
  $result[]

@process[aAction;aRequest;aOptions] -> [response]
## Замена dispatch
  $result[^pfResponse::create[]]

@processRequest[aRequest] -> [response|null]
  $result[]

@processAction[aRequest;aFunction] -> [response|null]
  $result[]

@processException[aRequest;aException] -> [response|null]
  $result[]

@processResponse[aRequest;aResponse] -> [response|null]
  $result[]

@render[aTemplateName;aContext]
  $result[^self.TEMPLATE.render[$aTemplateName;$aContext]]

@abort[aStatus;aData]
  ^throw[http.^aStatus.int(500);$aData]

@redirect[aURL;aStatus]
  ^abort(^self.abort(^aStatus.int(302))[$aURL])

@linkTo[aAction;aOptions;aAnchor][locals]
## Формирует ссылку на экшн, выполняя бэкрезолв путей.
  $result[]

@redirectTo[aAction;aOptions;aAnchor]
  ^self.abort(302)[^self.linkTo[$aAction;$aOptions;$aAnchor]]

@linkFor[aAction;aObject;aOptions][locals]
## Формирует ссылку на объект
  $result[]

@redirectFor[aAction;aObject;aOptions]
  ^self.abort[http.302;^self.linkTo[$aAction;$aOptions;$aAnchor]]

@assignVar[aName;aValue]
  $result[]

@assignVars[aVars]
  $result[]

@default[aRequest] -> [response]
  $result[]

@postDefault[aResponse] -> [response]
  $result[$aResponse]

#@onINDEX[aRequest] -> [response] или ^router.root[$index]
#@onAction[aRequest] -> [response] или ^router.assign[action;$actionHandler;$.strict(true)]

#@error404[aRequest] -> [response]
#@postHtml[aResponse] -> [response]


#--------------------------------------------------------------------------------------------------

@CLASS
pfRequest

@BASE
pfClass

@OPTIONS
locals

@create[aOptions]

#--------------------------------------------------------------------------------------------------

@CLASS
pfResponse

@BASE
pfClass

@OPTIONS
locals

@create[aOptions]

@apply[aOptions]
## Заполняет объект response Парсера
  $result[]

#--------------------------------------------------------------------------------------------------

@CLASS
pfRouter

@BASE
pfClass

@OPTIONS
locals

@create[aOptions]

#--------------------------------------------------------------------------------------------------

@CLASS
pfMiddleware

@BASE
pfClass

@OPTIONS
locals

@create[aOptions]

@processRequest[aRequest;aController;aProcessOptions] -> [response|null]
# если ничего не возвращает, то продолжаем обработку, если возвращает pfHTTPResponse, то прерываем обработку и не зовем дургие middleware.

@processAction[aRequest;aFunction;aController;aProcessOptions] -> [response|null]
# если ничего не возвращает, то продолжаем обработку, если возвращает, то продолжаем до вызова view

@processExceptions[aRequest;aException;aController;aProcessOptions] -> [response|null]
# если возвращает response, то прокидываем его дальше, если нет, то протягиваем exception дальше по мидлваре и если его никто не обработает выбрасываем заново

@processResponse[aRequest;aResponse;aController;aProcessOptions] -> [response|null]
# должен вернуть response-объект, который пойдет дальше.

