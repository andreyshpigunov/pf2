# Задачи для PF2

# Используем для задач плагин https://github.com/aziz/PlainTasks

Features:
  ✔ Добавить параметр cryptKey в pfSQLSecurity.encode/decode @done (16-12-09 12:08)
  ☐ Убрать в antiflood sql-команды с данными из лога?
  ☐ В генераторе форм учитывать поле formField из поля модели
  ☐ Процессор static в роутере. Полезно, если статику хотим закрыть авторизацией
     router.Static("/assets", "./assets")
     router.StaticFS("/more_static", http.Dir("my_file_system"))
     router.StaticFile("/favicon.ico", "./resources/favicon.ico")
  ☐ Сделать обработку X-Real-IP и X-Forwarded-For в pfRequest.
     https://github.com/gin-gonic/gin/blob/master/context.go#L341

Documentation:
  ☐ Написать документацию для контролеров
    ☐ Обработка запроса: цeпочка модулей, обработчики, запросы и ответы, мидлваре
    ☐ Маршрутизация: роутер, процессоры, реверс путей
    ☐ Шаблоны

SQL:
  ☐ Перенести команду manage.p sql в библиотеку
     Дамп схемы для sqlite: echo ".schema" | sqlite3 test_dump.sqlite3
  ☐ Парсинг строки подключения перенести в pfConnection
     Cделать в pfConnection поля host, user и т.д.

Generators:
  ☐ Рефакторинг manage.p generate form.
    ☐ Вынести виджеты в отдельные пакеты.
    ☐ Сделать класс виджетов для вертикальной формы BS4.
    ☐ Сделать короткие имена для виджетов: bs2, bs3, bs4, bs4_h, sui.

Console:
  ☐ Алиасы для команд?
     manage.p gen form

Auth:
  ✔ Перенести метод digest из pf-secrets-app@CoreSecurity, добавить параметры secretKey и disableHMAC. @done (16-12-26 15:23)
    В psSQLSecurity есть метод digest описан как hmac-digest, но хеширует без hmac.
  ☐ В auth.p@pfUserRolesAuth добавить время жизни куки в токен и проверять при авторизации
  ☐ Сделать дефолтную генерацию secureToken в модели pfUserModel. Посолить токен текущим временем.
  ☐ Команда manage.p auth [create-user|modify-user]



＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive: